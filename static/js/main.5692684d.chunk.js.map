{"version":3,"sources":["reducers/todos.js","actions/index.js","reducers/visibilityFilter.js","reducers/index.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/Link.js","containers/FilterLink.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["todos","state","action","type","id","text","completed","map","todo","nextTodoId","VisibilityFilters","visibilityFilter","filter","combineReducers","connect","input","dispatch","onSubmit","e","preventDefault","value","trim","ref","el","Todo","onClick","style","textDecoration","TodoList","toggleTodo","key","getVisibleTodos","task","Error","Link","active","children","disabled","marginLeft","ownProps","Footer","FilterLink","App","VisibleTodoList","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5692684d.chunk.js","sourcesContent":["const todos = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: false\r\n        }\r\n      ];\r\n    case 'TOGGLE_TODO':\r\n      return state.map(todo =>\r\n          todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n        );\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default todos;","let nextTodoId = 0;\r\n\r\nexport const addTodo = text => ({\r\n  type: 'ADD_TODO',\r\n  id: nextTodoId++,\r\n  text\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n  type: 'TOGGLE_TODO',\r\n  id\r\n});\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: 'SHOW_ALL',\r\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\r\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\r\n};\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n  type: 'SET_VISIBILITY_FILTER',\r\n  filter\r\n});","import { VisibilityFilters } from '../actions';\r\n\r\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\r\n  switch (action.type) {\r\n    case 'SET_VISIBILITY_FILTER':\r\n      return action.filter;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default visibilityFilter;","import { combineReducers } from 'redux';\r\nimport todos from './todos';\r\nimport visibilityFilter from './visibilityFilter';\r\n\r\nexport default combineReducers({\r\n  todos,\r\n  visibilityFilter\r\n});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../actions';\r\n\r\nconst AddTodo = ({ dispatch }) => {\r\n  let input;\r\n\r\n  return (\r\n    <div>\r\n      <form\r\n        onSubmit={\r\n          e => {\r\n            e.preventDefault();\r\n\r\n            if (!input.value.trim()) {\r\n              return\r\n            }\r\n\r\n            dispatch(addTodo(input.value));\r\n            input.value='';\r\n          }\r\n        }\r\n      >\r\n        <input type=\"text\" ref={el => (input = el)} />\r\n        <button type='submit'>Add Todo</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect()(AddTodo);","import React from 'react';\r\n\r\nconst Todo = ({ onClick, completed, text }) => (\r\n  <li\r\n    onClick={onClick}\r\n    style={{\r\n      textDecoration: completed ? 'line-through' : 'none'\r\n    }}\r\n  >\r\n    {text}\r\n  </li>\r\n);\r\n\r\nexport default Todo;","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, toggleTodo }) => (\r\n  <ul>\r\n    {todos.map(todo => (\r\n      <Todo key={todo.id} {...todo} onClick={() => toggleTodo(todo.id)} />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default TodoList;","import { connect } from 'react-redux';\r\nimport { VisibilityFilters, toggleTodo } from '../actions';\r\nimport TodoList from '../components/TodoList';\r\n\r\nconst getVisibleTodos = (todos, filter) => {\r\n  switch (filter) {\r\n    case VisibilityFilters.SHOW_ALL:\r\n      return todos;\r\n    case VisibilityFilters.SHOW_COMPLETED:\r\n      return todos.filter(task => task.completed);\r\n    case VisibilityFilters.SHOW_ACTIVE:\r\n      return todos.filter(task => !task.completed);\r\n    default:\r\n      throw new Error('Uknown filter: ' + filter);\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  todos: getVisibleTodos(state.todos, state.visibilityFilter)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleTodo: id => dispatch(toggleTodo(id))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList);","import React from 'react';\r\n\r\nconst Link = ({ active, onClick, children }) => (\r\n  <button\r\n    onClick={ onClick }\r\n    disabled={ active }\r\n    style={{\r\n      marginLeft: '4px'\r\n    }}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n\r\nexport default Link;","import { connect } from 'react-redux';\r\nimport { setVisibilityFilter } from '../actions';\r\nimport Link from '../components/Link';\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  active: ownProps.filter === state.visibilityFilter\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Link);","import React from 'react';\r\nimport FilterLink from '../containers/FilterLink';\r\nimport { VisibilityFilters } from '../actions';\r\n\r\nconst Footer = () => (\r\n  <div>\r\n    <span>Show: </span>\r\n    <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\r\n    <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\r\n    <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\r\n  </div>\r\n);\r\n\r\nexport default Footer;","import React from 'react';\r\nimport AddTodo from '../containers/AddTodo';\r\nimport VisibleTodoList from '../containers/VisibleTodoList';\r\nimport Footer from './Footer';\r\n\r\nconst App = () => (\r\n  <div>\r\n    <AddTodo />\r\n    <VisibleTodoList />\r\n    <Footer />\r\n  </div>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}